import logging
import html # –î–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞
from telebot import TeleBot, types
from telebot.storage import StateMemoryStorage
# from telebot.handler_backends import State, StatesGroup

# --- –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ DB ---
db = None # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞—Ä–∞–Ω–µ–µ
try:
    from db import db as imported_db # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–¥ –¥—Ä—É–≥–∏–º –∏–º–µ–Ω–µ–º
    db = imported_db # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞
    if db is None or db.conn is None or db.conn.closed:
        raise ImportError("Database connection is not available after import.")
    logger_db_check = logging.getLogger(__name__)
    logger_db_check.info("Database object imported and connection verified successfully.")
except Exception as e:
    logging.basicConfig(level=logging.CRITICAL, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    logger = logging.getLogger(__name__)
    logger.critical(f"CRITICAL ERROR: Could not import or verify database connection. Bot cannot start. Error: {e}", exc_info=True)
    db = None # –Ø–≤–Ω–æ —Å—Ç–∞–≤–∏–º None, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∏–∂–µ —Ä–∞–±–æ—Ç–∞–ª–∏

# --- –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
BOT_TOKEN = None
if db: # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ db —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
    try:
        from config import BOT_TOKEN
        if not BOT_TOKEN:
             raise ValueError("BOT_TOKEN is empty or not set in config.py")
    except (ImportError, ValueError, Exception) as config_e:
        logger.critical(f"CRITICAL ERROR: Failed to load BOT_TOKEN from config: {config_e}", exc_info=True)
        db = None # –°—á–∏—Ç–∞–µ–º –∑–∞–ø—É—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã–º
        BOT_TOKEN = None

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ ---
if not logging.getLogger().hasHandlers():
     logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ –û–ö) ---
bot = None
if db and BOT_TOKEN:
    logger.info("Initializing TeleBot...")
    try:
        state_storage = StateMemoryStorage()
        bot = TeleBot(BOT_TOKEN, state_storage=state_storage, parse_mode='HTML')
        logger.info("TeleBot initialized successfully.")
    except Exception as bot_init_err:
         logger.critical(f"CRITICAL ERROR: Failed to initialize TeleBot: {bot_init_err}", exc_info=True)
         bot = None # –°—á–∏—Ç–∞–µ–º –∑–∞–ø—É—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã–º
else:
    logger.critical("Bot initialization skipped due to previous critical errors (DB or Config).")


# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
BUTTON_NEXT_CARD = "–î–∞–ª—å—à–µ ‚ñ∂‚ñ∂"
BUTTON_ADD_WORD = "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ +"
BUTTON_DELETE_WORD = "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ"

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ ---
def is_bot_available(message_or_call):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ –±–æ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –ë–î."""
    is_call = isinstance(message_or_call, types.CallbackQuery)
    user_id = message_or_call.from_user.id

    if bot is None or db is None or db.conn is None or db.conn.closed:
        logger.error(f"Bot or DB unavailable. Request from user {user_id}")
        try:
            if bot: # –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if is_call:
                    bot.answer_callback_query(message_or_call.id, "üòî –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
                else:
                    bot.reply_to(message_or_call, "üòî –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—à–∏–±–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as send_err:
             logger.error(f"Could not even send unavailability message: {send_err}")
        return False
    return True

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã /start –∏ /help."""
    if not is_bot_available(message): return

    user_id = message.from_user.id
    chat_id = message.chat.id
    command = message.text.strip('/')
    logger.info(f"User {user_id} used /{command}")

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
       bot.set_state(user_id, state=None, chat_id=chat_id)
       with bot.retrieve_data(user_id, chat_id) as data: data.clear()
       logger.debug(f"Cleared state and data for user {user_id}")
    except Exception as e:
       logger.error(f"Error clearing state/data for user {user_id} in /{command}: {e}", exc_info=True)

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = """
üéì <b>–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Å –±–æ—Ç–æ–º - –ª–µ–≥–∫–æ!</b>

–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞.
–ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤ —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω.

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/cards - –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É üß†
/add_word - –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–µ —Å–ª–æ–≤–æ ‚ûï
/delete_word - –£–¥–∞–ª–∏—Ç—å —Å–≤–æ–µ —Å–ª–æ–≤–æ ‚ûñ
/my_words - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —Å–ª–æ–≤–∞ üìñ
/stats - –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä
/input_mode - –í—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞ ‚å®Ô∏è
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ ‚ÑπÔ∏è
"""
    try:
        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π, –µ—Å–ª–∏ –±—ã–ª–∞
        bot.reply_to(message, welcome_text, reply_markup=types.ReplyKeyboardRemove())
    except Exception as e:
         logger.error(f"Failed to send welcome message to user {user_id}: {e}", exc_info=True)

@bot.message_handler(commands=['cards'])
def handle_cards(message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–µ—Å—Å–∏—é –∫–∞—Ä—Ç–æ—á–µ–∫, —É—á–∏—Ç—ã–≤–∞—è —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞."""
    if not is_bot_available(message): return

    user_id = message.from_user.id
    chat_id = message.chat.id
    logger.info(f"User {user_id} requested /cards")

    try:
        bot.set_state(user_id, state=None, chat_id=chat_id)
        with bot.retrieve_data(user_id, chat_id) as data: data.clear()

        total_words = db.count_total_words(user_id)
        if total_words == 0:
             bot.send_message(chat_id, "üì≠ –í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç! –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞: /add_word", reply_markup=types.ReplyKeyboardRemove())
             return

        card = db.get_random_card(user_id)
        if card is None:
             bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=types.ReplyKeyboardRemove())
             logger.warning(f"get_random_card returned None for user {user_id}, total_words: {total_words}")
             return

        input_mode = db.get_user_input_mode(user_id)
        logger.debug(f"User {user_id} input mode: '{input_mode}' for card '{card['en_word']}'")

        card_data_to_store = {'correct_answer': card['en_word'], 'word_type': card['word_type'], 'word_ref_id': card['word_ref_id']}
        message_text = f"üá∑üá∫ {html.escape(card['ru_word'])}" # –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –æ–±—â–∏–π

        reply_markup = None # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–µ—Ç
        if input_mode == 'buttons':
            message_text = f"ü§î <b>–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:</b>\n{message_text}"
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
            options = card['options']
            option_buttons = [types.KeyboardButton(word) for word in options]
            rows = [option_buttons[i:i + 2] for i in range(0, len(option_buttons), 2)]
            for row in rows: markup.row(*row)
            markup.row(types.KeyboardButton(BUTTON_NEXT_CARD), types.KeyboardButton(BUTTON_ADD_WORD))
            markup.row(types.KeyboardButton(BUTTON_DELETE_WORD))
            reply_markup = markup

        elif input_mode == 'keyboard':
            message_text = f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:</b>\n{message_text}"
            reply_markup = types.ReplyKeyboardRemove() # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

        else: # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
             logger.error(f"Unknown input mode '{input_mode}' for user {user_id}. Defaulting to keyboard.")
             message_text = f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ (—Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é):</b>\n{message_text}"
             reply_markup = types.ReplyKeyboardRemove()

        bot.send_message(chat_id, message_text, reply_markup=reply_markup)

        with bot.retrieve_data(user_id, chat_id) as data:
            data.update(card_data_to_store)
        logger.debug(f"Stored card data for user {user_id}: {card_data_to_store}")

    except Exception as e:
        logger.error(f"Error in handle_cards for user {user_id}: {e}", exc_info=True)
        bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /cards –µ—â–µ —Ä–∞–∑.", reply_markup=types.ReplyKeyboardRemove())


@bot.message_handler(commands=['input_mode'])
def handle_input_mode_command(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞."""
    if not is_bot_available(message): return
    user_id = message.from_user.id
    chat_id = message.chat.id
    logger.info(f"User {user_id} requested /input_mode")
    try:
        current_mode = db.get_user_input_mode(user_id)
        markup = types.InlineKeyboardMarkup(row_width=1)
        button_text_buttons = f"{'‚úÖ ' if current_mode == 'buttons' else ''}–ö–Ω–æ–ø–∫–∏ üîò"
        button_text_keyboard = f"{'‚úÖ ' if current_mode == 'keyboard' else ''}–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ‚å®Ô∏è"
        markup.add(
            types.InlineKeyboardButton(button_text_buttons, callback_data="set_mode_buttons"),
            types.InlineKeyboardButton(button_text_keyboard, callback_data="set_mode_keyboard")
        )
        bot.send_message(
            chat_id,
            "‚öôÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞:</b>\n\n"
            "üîò <b>–ö–Ω–æ–ø–∫–∏:</b> –ü–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞.\n"
            "‚å®Ô∏è <b>–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞:</b> –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.",
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"Error handling /input_mode for user {user_id}: {e}", exc_info=True)
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('set_mode_'))
def callback_set_input_mode(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ Inline –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞."""
    if not is_bot_available(call): return # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å

    user_id = call.from_user.id
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    requested_mode = call.data.replace('set_mode_', '') # 'buttons' –∏–ª–∏ 'keyboard'
    logger.info(f"User {user_id} requested set mode to '{requested_mode}' via callback.")

    if requested_mode not in ('buttons', 'keyboard'):
        logger.warning(f"Invalid mode '{requested_mode}' in callback data from user {user_id}.")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º", show_alert=True)
        return

    try:
        success = db.set_user_input_mode(user_id, requested_mode)
        if success:
            new_markup = types.InlineKeyboardMarkup(row_width=1)
            button_text_buttons = f"{'‚úÖ ' if requested_mode == 'buttons' else ''}–ö–Ω–æ–ø–∫–∏ üîò"
            button_text_keyboard = f"{'‚úÖ ' if requested_mode == 'keyboard' else ''}–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ‚å®Ô∏è"
            confirmation_text = f"–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º: <b>{'–ö–Ω–æ–ø–∫–∏ üîò' if requested_mode == 'buttons' else '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ‚å®Ô∏è'}</b>"
            new_markup.add(
                types.InlineKeyboardButton(button_text_buttons, callback_data="set_mode_buttons"),
                types.InlineKeyboardButton(button_text_keyboard, callback_data="set_mode_keyboard")
            )
            bot.edit_message_text(
                chat_id=chat_id, message_id=message_id,
                text=f"‚öôÔ∏è <b>–†–µ–∂–∏–º –≤–≤–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω.</b>\n\n{confirmation_text}\n\n"
                     "üîò <b>–ö–Ω–æ–ø–∫–∏:</b> –ü–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞.\n"
                     "‚å®Ô∏è <b>–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞:</b> –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.",
                reply_markup=new_markup
            )
            bot.answer_callback_query(call.id) # –£–±–∏—Ä–∞–µ–º —á–∞—Å–∏–∫–∏
            logger.info(f"Mode updated to '{requested_mode}' for user {user_id}. Message edited.")
        else:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!", show_alert=True)
            logger.error(f"Failed to set mode '{requested_mode}' in DB for user {user_id}.")
    except Exception as e:
        logger.error(f"Error processing set_mode callback for user {user_id}: {e}", exc_info=True)
        try: bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)
        except Exception as ans_err: logger.error(f"Could not answer callback query about error: {ans_err}")


@bot.message_handler(content_types=['text'], func=lambda message: bot is not None and not message.text.startswith('/'))
def handle_non_command_text(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –æ—Ç–≤–µ—Ç—ã, –∫–Ω–æ–ø–∫–∏, –≤–≤–æ–¥ –¥–ª—è add/delete."""
    if not is_bot_available(message): return

    user_id = message.from_user.id
    chat_id = message.chat.id
    user_text = message.text.strip()
    logger.debug(f"Received text '{user_text}' from user {user_id}")

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–æ–∫ ReplyKeyboard
    if user_text == BUTTON_NEXT_CARD:
        logger.info(f"User {user_id} clicked '{BUTTON_NEXT_CARD}'.")
        handle_cards(message)
        return
    if user_text == BUTTON_ADD_WORD:
        logger.info(f"User {user_id} clicked '{BUTTON_ADD_WORD}'.")
        start_adding_word_process(message)
        return
    if user_text == BUTTON_DELETE_WORD:
        logger.info(f"User {user_id} clicked '{BUTTON_DELETE_WORD}'.")
        start_deleting_word_process(message)
        return

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ (add/delete)
    try:
        with bot.retrieve_data(user_id, chat_id) as data:
            if data is None: logger.warning(f"Data is None for user {user_id}"); return

            current_step = data.get('next_step')
            if current_step == 'add_word':
                logger.info(f"Processing input for 'add_word'.")
                data.pop('next_step', None); bot.set_state(user_id, state=None, chat_id=chat_id)
                process_word_addition(message)
                return
            elif current_step == 'delete_word':
                logger.info(f"Processing input for 'delete_word'.")
                data.pop('next_step', None); bot.set_state(user_id, state=None, chat_id=chat_id)
                process_word_deletion(message)
                return

            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É
            correct_answer = data.get('correct_answer')
            word_type = data.get('word_type')
            word_ref_id = data.get('word_ref_id')

            if correct_answer is None or word_type is None or word_ref_id is None:
                 logger.debug(f"Received text '{user_text}' from user {user_id}, but no active card data or expected step.")
                 # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cards –∏–ª–∏ /help"
                 return

            # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É ---
            is_correct = user_text.lower() == correct_answer.lower()
            logger.info(f"User {user_id} answered card. Input: '{user_text}', Correct: '{correct_answer}', Result: {is_correct}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            input_mode = db.get_user_input_mode(user_id) # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
            next_action_prompt = f"–ù–∞–∂–º–∏—Ç–µ '{BUTTON_NEXT_CARD}'" if input_mode == 'buttons' else "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cards"

            if is_correct:
                reply = f"‚úÖ <b>–í–µ—Ä–Ω–æ!</b>\n\n{next_action_prompt}, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
            else:
                reply = f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω–æ!</b> –ü—Ä–∞–≤–∏–ª—å–Ω–æ: <b>{html.escape(correct_answer)}</b>\n\n{next_action_prompt}, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∂–∏–º–∞, –Ω–µ –º–µ–Ω—è–µ–º –µ–µ –∑–¥–µ—Å—å)
            bot.send_message(chat_id, reply)

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î
            db.record_answer(user_id, word_type, word_ref_id, is_correct)

            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ *—Ç–æ–ª—å–∫–æ* —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ data
            data.pop('correct_answer', None)
            data.pop('word_type', None)
            data.pop('word_ref_id', None)
            logger.debug(f"Cleared card data for user {user_id} after recording answer.")

    except Exception as e:
        logger.error(f"Error processing non-command text for user {user_id}: {e}", exc_info=True)
        bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞.")


# --- –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è ---

def start_adding_word_process(message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞."""
    if not is_bot_available(message): return
    user_id = message.from_user.id; chat_id = message.chat.id
    logger.info(f"Starting add word process for user {user_id}")
    try:
       bot.set_state(user_id, state=None, chat_id=chat_id)
       with bot.retrieve_data(user_id, chat_id) as data:
           data.clear(); data['next_step'] = 'add_word'
       logger.debug(f"Set 'next_step' to 'add_word' for user {user_id}")
       bot.send_message(chat_id, "üìù –í–≤–µ–¥–∏—Ç–µ: <code>–∞–Ω–≥–ª. —Å–ª–æ–≤–æ - —Ä—É—Å. –ø–µ—Ä–µ–≤–æ–¥</code>\n(–ü—Ä–∏–º–µ—Ä: <code>example - –ø—Ä–∏–º–µ—Ä</code>)", reply_markup=types.ReplyKeyboardRemove())
    except Exception as e:
       logger.error(f"Error starting add word process for user {user_id}: {e}", exc_info=True)
       bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /add_word —Å–Ω–æ–≤–∞.")

def process_word_addition(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞."""
    if not is_bot_available(message): return
    user_id = message.from_user.id; chat_id = message.chat.id; text = message.text.strip()
    try:
        if '-' not in text: raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å '-'")
        parts = text.split('-', 1); en_word = parts[0].strip(); ru_word = parts[1].strip()
        if not en_word or not ru_word: raise ValueError("–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ –∏–ª–∏ —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ –ø—É—Å—Ç–æ–µ")

        added = db.add_user_word(user_id, en_word, ru_word)
        en_safe, ru_safe = html.escape(en_word), html.escape(ru_word)
        reply = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: <code>{en_safe} - {ru_safe}</code>!" if added else f"‚ö†Ô∏è –°–ª–æ–≤–æ <code>{en_safe}</code> —É–∂–µ –µ—Å—Ç—å."
        bot.send_message(chat_id, reply)
        bot.send_message(chat_id, "–ß—Ç–æ –¥–∞–ª—å—à–µ? /cards, /add_word, /my_words")
    except ValueError as ve:
        logger.warning(f"User {user_id} add format error: '{text}' - {ve}")
        bot.send_message(chat_id, f"‚ùå <b>–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞:</b> {ve}.\n–ù—É–∂–Ω–æ: <code>—Å–ª–æ–≤–æ - –ø–µ—Ä–µ–≤–æ–¥</code>\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ /add_word —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logger.error(f"Error processing word addition for user {user_id}, input '{text}': {e}", exc_info=True)
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def start_deleting_word_process(message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞."""
    if not is_bot_available(message): return
    user_id = message.from_user.id; chat_id = message.chat.id
    logger.info(f"Starting delete word process for user {user_id}")
    try:
       bot.set_state(user_id, state=None, chat_id=chat_id)
       with bot.retrieve_data(user_id, chat_id) as data:
           data.clear(); data['next_step'] = 'delete_word'
       logger.debug(f"Set 'next_step' to 'delete_word' for user {user_id}")
       bot.send_message(chat_id, "üóëÔ∏è –í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=types.ReplyKeyboardRemove())
    except Exception as e:
       logger.error(f"Error starting delete word process for user {user_id}: {e}", exc_info=True)
       bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /delete_word —Å–Ω–æ–≤–∞.")

def process_word_deletion(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞."""
    if not is_bot_available(message): return
    user_id = message.from_user.id; chat_id = message.chat.id; en_word = message.text.strip()
    if not en_word:
        bot.send_message(chat_id, "‚ùå –ù–µ –≤–≤–µ–¥–µ–Ω–æ —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /delete_word —Å–Ω–æ–≤–∞."); return
    try:
        deleted = db.delete_user_word(user_id, en_word)
        en_safe = html.escape(en_word)
        reply = f"‚úÖ –°–ª–æ–≤–æ <code>{en_safe}</code> —É–¥–∞–ª–µ–Ω–æ." if deleted else f"‚ö†Ô∏è –°–ª–æ–≤–æ <code>{en_safe}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ."
        bot.send_message(chat_id, reply)
        bot.send_message(chat_id, "–ß—Ç–æ –¥–∞–ª—å—à–µ? /cards, /delete_word, /my_words")
    except Exception as e:
        logger.error(f"Error processing word deletion for user {user_id}, input '{en_word}': {e}", exc_info=True)
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞ <code>{html.escape(en_word)}</code>.")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ add/delete (–≤—ã–∑—ã–≤–∞—é—Ç start_..._process) ---
@bot.message_handler(commands=['add_word'])
def handle_add_word_command(message):
    if not is_bot_available(message): return
    start_adding_word_process(message)

@bot.message_handler(commands=['delete_word'])
def handle_delete_word_command(message):
    if not is_bot_available(message): return
    start_deleting_word_process(message)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ /my_words –∏ /stats ---
@bot.message_handler(commands=['my_words'])
def show_my_words(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–æ–≤–∞, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    if not is_bot_available(message): return
    user_id = message.from_user.id; chat_id = message.chat.id
    logger.info(f"User {user_id} requested /my_words")
    try:
        user_words = db.get_user_words(user_id)
        if not user_words:
            bot.send_message(chat_id, "üìñ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_word."); return
        response_lines = ["üìñ <b>–í–∞—à–∏ —Å–ª–æ–≤–∞:</b>\n"]
        for i, (en, ru) in enumerate(user_words, 1):
             response_lines.append(f"{i}. <code>{html.escape(en)}</code> - {html.escape(ru)}")
        full_response = "\n".join(response_lines)
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è > 4096 —Å–∏–º–≤–æ–ª–æ–≤
        if len(full_response) > 4096:
            safe_limit = full_response.rfind('\n', 0, 4050); safe_limit = 4050 if safe_limit == -1 else safe_limit
            full_response = full_response[:safe_limit] + "\n\n[... —Å–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ...]"
        bot.send_message(chat_id, full_response)
    except Exception as e:
        logger.error(f"Error showing user words for user {user_id}: {e}", exc_info=True)
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤.")

@bot.message_handler(commands=['stats'])
def show_stats(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not is_bot_available(message): return
    user_id = message.from_user.id; chat_id = message.chat.id
    logger.info(f"User {user_id} requested /stats")
    try:
        stats = db.get_user_stats(user_id)
        user_words_count = len(db.get_user_words(user_id))
        available_words_count = db.count_total_words(user_id)
        if stats['words_practiced'] == 0 and stats['total_correct'] == 0 and stats['total_incorrect'] == 0:
             response = (f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
                         f"–í—ã –µ—â–µ –Ω–µ –æ—Ç–≤–µ—á–∞–ª–∏!\n"
                         f"üìñ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤–∞–º–∏: {user_words_count}\n"
                         f"üìö –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {available_words_count}\n\n"
                         f"–ù–∞—á–Ω–∏—Ç–µ: /cards")
        else:
            total_answers = stats['total_correct'] + stats['total_incorrect']
            accuracy = (stats['total_correct'] / total_answers * 100) if total_answers > 0 else 0
            response = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üß† –°–ª–æ–≤ —Å –æ—Ç–≤–µ—Ç–∞–º–∏: {stats['words_practiced']}
‚úÖ –í—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {stats['total_correct']}
‚ùå –í—Å–µ–≥–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {stats['total_incorrect']}
üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%

üìñ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤–∞–º–∏: {user_words_count}
üìö –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {available_words_count}
"""
        bot.send_message(chat_id, response)
    except Exception as e:
        logger.error(f"Error showing stats for user {user_id}: {e}", exc_info=True)
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    if bot is None:
        logger.critical("Bot object is None. Cannot start polling. Check logs for DB or Config errors.")
    else:
        logger.info("Starting bot polling...")
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É KeyboardInterrupt –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Ctrl+C
            bot.infinity_polling(logger_level=logging.INFO, timeout=60, long_polling_timeout=30)
        except KeyboardInterrupt:
             logger.info("Bot polling stopped manually via KeyboardInterrupt.")
        except Exception as e:
            logger.critical(f"Bot polling stopped due to unexpected error: {e}", exc_info=True)
        finally:
            # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            if db and db.conn and not db.conn.closed:
                logger.info("Closing database connection...")
                db.close()
            logger.info("Bot stopped.")